# SPDX-FileCopyrightText: (c) 2003-2025 The Apache Software Foundation (ASF) and contributors.
# SPDX-FileCopyrightText: (c) 2025 Liferay, Inc.
# SPDX-License-Identifier: Apache-2.0

==========================================
Environment setup for releasing artifacts
==========================================

1. Environmental Setup
	* Increase the default Java heap available to Maven
	* export MAVEN_OPTS="-Xmx256m -XX:MetaspaceSize=512m"
	* Use the JDK 11.
	* Use Maven 3.3.1 or higher
	* edit $HOME/.m2/settings.xml, make sure your Apache account credentials are setup in the servers section:
        <servers>
            <server>
              <id>apache.snapshots.https</id>
              <username>your-apache-username</username>
              <password>your-apache-password</password>
            </server>

            <server>
              <id>apache.releases.https</id>
              <username>your-apache-username</username>
              <password>your-apache-password</password>
            </server>
    * submit your public key to an authorized Public Key server such as http://pgp.mit.edu/
      see instructions here:
        http://blog.sonatype.com/2010/01/how-to-generate-pgp-signatures-with-maven/

2. Prepare the source for release
	* Cleanup JIRA so the Fix Version in issues resolved since the last release includes this release version correctly.
	* Create a JIRA issue for release maintenance for example see
		https://issues.apache.org/jira/browse/PLUTO-807
	* Clone a clean copy of master (on the specific branch if needed) to release using command line git.
	    cd ~/apache/releases
	    git clone https://github.com/apache/plutonium

	* Do not use Eclipse to do the checkout. The extra dot (.) files created by Eclipse throws off the rat:check processing.

3. Verify the source has the required license headers before trying to release.

    mvn -P rat apache-rat:check

4. DRY RUN
	Do a dry run of the release:prepare step:

		$ mvn -P apache-release,plutonium -DrunOnlyAtExecutionRoot=true release:prepare -DdryRun=true

	The dry run will not commit any changes back to Git and gives you the opportunity to verify that the release process will complete as expected.
	You will be prompted for the following information :

		Release version - take the default or use semvar like 4.0.0
		SCM release tag - review the default naming and compare it with the existing git tag structure; change it if needed.
		New development version - take the default
		Have your GPG Passphrase ready

	If you cancel a release:prepare before it updates the pom.xml versions, then use the release:clean goal to just remove the extra files that were created.
	The Maven release plugin checks for SNAPSHOT dependencies in pom's. It will not complete the prepare goal until all SNAPSHOT dependencies are resolved.

5. VERIFY RELEASE
	Verify that the release process completed as expected

	The release plugin will create pom.xml.tag files which contain the changes that would have been committed to Git.
	The only differences between pom.xml.tag and it's corresponding pom.xml file should be the version number(s) and git location(s) (e.g., /trunk vs /tags).

	Check release.properties and make sure that the scm properties have the right version. Sometimes the scm location can be the previous version not the next version.

	Verify signatures (Verifying release signatures)
        gpg --verify target/plutonium-4.0.0-SNAPSHOT-source-release.zip.asc target/plutonium-4.0.0-SNAPSHOT-source-release.zip

6. CLEANUP AND START OVER
	Cleanup the release prepare files again:

	$ mvn -P apache-release,plutonium release:clean

7. PERFORM THE RELEASE

	a. REQUIRED: Release the main Liferay Plutonium software modules

	$ cd plutonium
	$ mvn -P apache-release,plutonium release:prepare -DrunOnlyAtExecutionRoot=true
	$ mvn -P apache-release,plutonium release:perform -Duser.name=[your_apache_uid]
	$ vi portlet-tck_3.0/pom.xml # Update the parent <version/> and also the version in the <plutonium.test.version/> property
	$ git commit -a -m "PLUTO-807 Upgraded the TCK to Plutonium test version 4.0.0"

	If your local OS userid doesn't match your Apache userid, then you'll have to also override the value provided
	by the OS to Maven for the site-deploy step to work. This is known to work for Linux, but not for Mac and unknown for Windows.

	b. OPTIONAL: Release the Archetypes (Each has its own version scheme and release schedule)

	$ cd plutonium/maven-archetypes/bean-portlet-archetype
	$ mvn -P apache-release release:prepare -Duser.name=[your_apache_uid]
	$ mvn -P apache-release release:perform -Duser.name=[your_apache_uid]

	$ cd plutonium/maven-archetypes/generic-portlet-archetype
	$ mvn -P apache-release release:prepare -Duser.name=[your_apache_uid]
	$ mvn -P apache-release release:perform -Duser.name=[your_apache_uid]

	$ cd plutonium/maven-archetypes/mvcbean-jsp-portlet-archetype
	$ mvn -P apache-release release:prepare -Duser.name=[your_apache_uid]
	$ mvn -P apache-release release:perform -Duser.name=[your_apache_uid]

	$ cd plutonium/maven-archetypes/mvcbean-thymeleaf-portlet-archetype
	
	#	
	# NOTE: You might need to get rid of a "-SNAPSHOT" from the following POM and Gradle descriptors first!
	#

	$ vi src/main/resources/archetype-resources/pom.xml # Change "4.0.0-SNAPSHOT" to "4.0.0"
	$ vi src/main/resources/archetype-resources/build.gradle # Change "4.0.0-SNAPSHOT" to "4.0.0"
	$ git commit -a -m "PLUTO-807 Upgraded to version 4.0.0"

	$ mvn -P apache-release release:prepare -Duser.name=[your_apache_uid]
	$ mvn -P apache-release release:perform -Duser.name=[your_apache_uid]

8. VERIFY THE RELEASE
	a. Verify signatures (Verifying release signatures)

	$ gpg --verify target/plutonium-4.0.0-source-release.zip.asc target/plutonium-4.0.0-source-release.zip

    b. Verify the Nexus release artifacts

    Verify the staged artifacts in the nexus repo
        https://repository.apache.org/index.html
    Staging repositories (under Build Promotion) --> Name column --> com.liferay.plutonium-XXX
    Navigate through the artifact tree and make sure that all javadoc, sources, tests, jars, ... have
        .asc (GPG signature)
        .md5 files
    See http://people.apache.org/~henkp/repo/faq.html and http://www.apache.org/dev/release-signing.html#openpgp-ascii-detach-sig

9. Push the commits upstream but do NOT yet push any tags (commits can be reverted if necessary)

	$ git push origin master

10. Checkout the new tag, since the repository will be set to a later commit

    $ git checkout plutonium-4.0.0

11. Create a Distribution Bundle

        ant -f dist-build.xml -DincludeDemos=true -DpackageOnly=true -DnoClean=true

12. Release the bundle Zip file

	a. Use Maven command-line to release plutonium-4.0.0-bundle.zip

        #
        # NOTE: This will release a file with the following identification:
        #		 <groupId>com.liferay.plutonium</groupId>
        #		 <artifactId>plutonium-bundle</artifactId>
        #		 <version>4.0.0</version>
        #
        #  And the download filename will be plutonium-bundle-4.0.0.zip
        #
        mvn -Papache-release,plutonium \
          gpg:sign-and-deploy-file \
          -Dfile=target/dist/plutonium-4.0.0-bundle.zip \
          -DgroupId=com.liferay.plutonium \
          -DartifactId=plutonium-bundle \
          -Dversion=4.0.0 \
          -Durl=https://repository.apache.org/service/local/staging/deploy/maven2 \
          -DrepositoryId=apache.releases.https

    b. Close the nexus staging repo

        https://repository.apache.org/index.html
        Staging repositories (under Build Promotion) --> Name column --> com.liferay.plutonium-XXX
        Click checkbox for the open staging repo (com.liferay.plutonium-XXX) and press Close in the menu bar.

    c. Edit and then execute the following script in order to download the release artifacts from Nexus and
       commit them to Subversion:

    #!/bin/sh
    #
    # NOTE: Set user name to your Apache ID
    #
    USER_NAME=foo
    #
    # NOTE: Set base URL to the Nexus staging repository
    #
    BASE_URL="https://repository.apache.org/service/local/repositories/orgapacheportals-1025/content"
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium/4.0.0/plutonium-4.0.0-source-release.zip
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium/4.0.0/plutonium-4.0.0-source-release.zip.asc
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium/4.0.0/plutonium-4.0.0-source-release.zip.md5
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium/4.0.0/plutonium-4.0.0-source-release.zip.sha1
    # Generate the SHA-512 checksum for the source release
    /usr/bin/shasum -a 512 plutonium-4.0.0-source-release.zip > plutonium-4.0.0-source-release.zip.sha512
    # Linux: sha512sum -a 512 plutonium-4.0.0-source-release.zip > plutonium-4.0.0-source-release.zip.sha512

    svn add plutonium-4.0.0-source-release*

    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium-bundle/4.0.0/plutonium-bundle-4.0.0.zip
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium-bundle/4.0.0/plutonium-bundle-4.0.0.zip.asc
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium-bundle/4.0.0/plutonium-bundle-4.0.0.zip.md5
    wget --no-check-certificate $BASE_URL/com/liferay/plutonium/plutonium-bundle/4.0.0/plutonium-bundle-4.0.0.zip.sha1
    # Generate the SHA-512 checksum for the binary release
    /usr/bin/shasum -a 512 plutonium-bundle-4.0.0.zip > plutonium-bundle-4.0.0.zip.sha512
    # Linux: sha512sum -a 512 plutonium-bundle-4.0.0.zip > plutonium-bundle-4.0.0.zip.sha512
    svn add plutonium-bundle-4.0.0.zip*
    svn commit -m "PLUTO-807 Committing Binary Release for Plutonium 4.0.0" --username $USER_NAME

13. FINALIZE THE RELEASE

    a. Promote the staged nexus artifacts
        https://repository.apache.org/index.html
        Staging repositories (under Build Promotion) --> Name column --> com.liferay.plutonium
        Click checkbox of the closed staging repo (com.liferay.plutonium-XXX) and select Release.

    b. Move the source/binary artifacts over to the distribution area
       Command line examples to distribute artifacts (plutonium-4.0.0-source-release.zip as an example below.):

        $ cd ~/asf/svn
        $ mkdir release
        $ cd release
        $ svn co https://dist.apache.org/repos/dist/release/portals/plutonium
        $ cd plutonium
        $ mv ../../dev/plutonium/plutonium-4.0.0-source-release* .
        $ svn add plutonium-4.0.0-source-release*
        $ svn commit -m "PLUTO-807 Committing Source Release for plutonium-4.0.0" --username $USER_NAME

    c. If the Portlet API was released, then move the source/binary artifacts over to the distribution area
        $ mv ../../dev/portals/plutonium/portlet-api-4.0.0* .
        $ svn add portlet-api-4.0.0*
        $ svn commit -m "PLUTO-807 Committing Binary Release for portlet-api-4.0.0" --username $USER_NAME

    d. Move the bundle artifacts over to the distribution area
        $ mv ../../dev/plutonium/plutonium-bundle-4.0.0.zip* .
        $ svn add plutonium-bundle-4.0.0.zip*
        $ svn commit -m "PLUTO-807 Committing Binary Release for Plutonium 4.0.0" --username $USER_NAME
        $ cd ../../dev/plutonium
        $ FILES=`svn status | grep plutonium | awk '{print $2}'`
        $ svn rm "$FILES"
        $ svn commit -m "PLUTO-807 Promoted artifacts from dev to release for Plutonium 4.0.0" --username $USER_NAME

    e. Push the tags upstream
        $ git push upstream plutonium-4.0.0
        $ git push upstream portlet-tck-3.0.3
        $ git push upstream bean-portlet-archetype-4.0.0
        $ git push upstream generic-portlet-archetype-4.0.0
        $ git push upstream mvcbean-jsp-portlet-archetype-4.0.0
        $ git push upstream mvcbean-thymeleaf-portlet-archetype-4.0.0

    WAIT 24hrs after committing releases for mirrors to replicate before announcing release

14. UPDATE JIRA
    Update the JIRA versions page to close all issues, mark the version as "released", and set the date to the date
    that the release was approved. You may also need to make a new release entry for the next release.

    Generate the Release Notes from the Version page